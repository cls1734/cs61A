"""
Q3: Pick a Digit

Implement digit, which takes positive integers n 和 k 和 has only a single return statement as its body. 
It returns the digit of n that is k positions to the left of the rightmost digit (the one's digit). 
If k is 0, return the rightmost digit. If there is no digit of n that is k positions to the left of the rightmost digit, return 0.

Hint: Use // and % and the built-in pow function to isolate a particular digit of n.

输出从右往左的第n个数字，第一个数字的n=0，若不存在则输出0
提示 :推荐使用//和%
"""

def digit(n, k):
    """Return the digit that is k from the right of n for positive integers n and k.

    >>> digit(3579, 2)
    5
    >>> digit(3579, 0)
    9
    >>> digit(3579, 10)
    0
    """
    return (n // pow(10, k)) % 10


"""
Q4: Middle Number
Implement middle by writing a single return expression that evaluates to the value 
that is neither the largest or smallest among three different integers a, b, and c.

Hint: Try combining all the numbers and then taking away the ones you don't want to return.

返回三个数字的中间值
"""

def middle(a, b, c):
    """Return the number among a, b, and c that is not the smallest or largest.
    Assume a, b, and c are all different numbers.

    >>> middle(3, 5, 4)
    4
    >>> middle(30, 5, 4)
    5
    >>> middle(3, 5, 40)
    5
    >>> middle(3, 5, 40)
    5
    >>> middle(30, 5, 40)
    30
    """
    return sorted([a, b, c])[1]


Optional Questions
"""
Q6: Falling Factorial
Let's write a function falling, which is a "falling" factorial that takes two arguments, n 和 k, 
and returns the product of k consecutive numbers, starting from n 和 working downwards.
When k is 0, the function should return 1.

传入两个值n,k ,将(n-1)*(n-2)*...(n-k)作为值并返回
若k = 0,则返回1
"""

def falling(n, k):
    """Compute the falling factorial of n to depth k.

    >>> falling(6, 3)  # 6 * 5 * 4
    120
    >>> falling(4, 3)  # 4 * 3 * 2
    24
    >>> falling(4, 1)  # 4
    4
    >>> falling(4, 0)
    1
    """
    ans = 1
    while k > 0:
        ans *= n
        n -= 1
        k -= 1
    return ans

"""
Q7: Divisible By k
Write a function divisible_by_k that takes positive integers n 和 k. 
It prints all positive integers less than or equal to n that are divisible by k from smallest to largest. 
Then, it returns how many numbers were printed

输出0~n中所有能被k整除的数，不存在则输出0
"""

def divisible_by_k(n, k):
    """
    >>> a = divisible_by_k(10, 2)  # 2, 4, 6, 8, and 10 are divisible by 2
    2
    4
    6
    8
    10
    >>> a
    5
    >>> b = divisible_by_k(3, 1)  # 1, 2, and 3 are divisible by 1
    1
    2
    3
    >>> b
    3
    >>> c = divisible_by_k(6, 7)  # There are no integers up to 6 divisible by 7
    >>> c
    0
    """
    ans = 0
    for i in range(1, n + 1):
        if i % k == 0:
            ans += 1
            print(i)
    return ans


"""
Q8: Sum Digits
Write a function that takes in a nonnegative integer 和 sums its digits. 
(Using floor division 和 modulo might be helpful here!)
"""

